pragma solidity ^0.4.18;

contract Lottery {
    
    mapping(address=> uint256) public winnings;
    address [] public tickets;
    
    string public name = "Lottery";
    string public symbol = "LOT";
    uint256 public maxTickets = 100;
    uint256 public remainingTickets = 0;
    uint public ticketCount = 0;
    uint256 public randNum = 0;
    address public latestWinner;
    
    function Lottery1(string tokenName, string tokenSymbol, uint256 maximumTicket) public {
    
        name = tokenName;
        symbol = tokenSymbol;
        maxTickets = maximumTicket;
        remainingTickets = maxTickets;
    }

    function Buy() public payable {
        require(msg.value == 1000000000000000000); 
        uint256 val ; msg.value/ 1000000000000000000;
    
        require(remainingTickets - val < remainingTickets);
        remainingTickets -= val;
    
        tickets.push(msg.sender);
        ticketCount++;
    
    }

    function Withdraw () public {
    
        require(winnings[msg.sender] > 0);
        
        uint256 amountToWithdraw = winnings[msg.sender];
    
        winnings[msg.sender] = 0;
    
        amountToWithdraw *= 1000000000000000000;
        msg.sender.transfer(amountToWithdraw);
    }



    function chooseWinner()  public {
    
        require(ticketCount > 0);
        
        randNum = uint(blockhash(block.number-1)) % ticketCount;
    
         latestWinner = tickets[randNum]; 
        
        winnings[latestWinner] = ticketCount;
        ticketCount = 0 ;
        remainingTickets = maxTickets;
    
        delete tickets;
    
    }   
}
    
